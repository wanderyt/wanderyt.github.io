<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanderyt的博客</title>
  <icon>https://www.gravatar.com/avatar/943afe58fb13bc7f7dc15d31310288a6</icon>
  <subtitle>会踢足球的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanderyt.github.io/"/>
  <updated>2019-08-05T03:05:12.828Z</updated>
  <id>http://wanderyt.github.io/</id>
  
  <author>
    <name>wanderyt</name>
    <email>wanderyt1988@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Configure vscode with file.exclude</title>
    <link href="http://wanderyt.github.io/2019/01/21/Configure-vscode-with-file-exclude/"/>
    <id>http://wanderyt.github.io/2019/01/21/Configure-vscode-with-file-exclude/</id>
    <published>2019-01-21T05:53:49.000Z</published>
    <updated>2019-08-05T03:05:12.828Z</updated>
    
    <content type="html"><![CDATA[<p>Reference resource: <a href="https://maxisam.github.io/2016/12/09/how-to-do-negative-pattern-for-VS-code-files-exclude/" target="_blank" rel="noopener">How to do negative pattern for VS Code files exclude</a></p><p>VSCode does not supprt negative regular expression (‘!’) on user settings <code>files.exclude</code>.</p><p>But we could have work around to set file exclusion rule in file explorer.</p><p>For example, if we only want to display <code>node_modules/@project</code> folder and hide all other folders, the setting could be like this:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// File explorer</span><br><span class="line">"files.exclude": &#123;</span><br><span class="line">  // Not hide node modules</span><br><span class="line">  "**/node_modules/": false,</span><br><span class="line">  // Hide node modules started with .</span><br><span class="line">  "**/node_modules/.*": true,</span><br><span class="line">  // Hide node modules started with any letter except @</span><br><span class="line">  "**/node_modules/[abcdefghijklmnopqrstuvwxyz]*": true,</span><br><span class="line">  // Hide node modules started with @ and any letter except p</span><br><span class="line">  "**/node_modules/@[abcdefghijklmnoqrstuvwxyz]*": true,</span><br><span class="line">  // Hide node modules started with @ and any letter except pr</span><br><span class="line">  "**/node_modules/@p[abcdefghijklmnopqstuvwxyz]*": true,</span><br><span class="line">  // Hide node modules started with @ and any letter except pro</span><br><span class="line">  "**/node_modules/@pr[abcdefghijklmnpqrstvwxyz]*": true,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>This could work perfectly. Yep.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Reference resource: &lt;a href=&quot;https://maxisam.github.io/2016/12/09/how-to-do-negative-pattern-for-VS-code-files-exclude/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="IDE" scheme="http://wanderyt.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>Fetch vs Axios</title>
    <link href="http://wanderyt.github.io/2018/02/12/Fetch-vs-Axios/"/>
    <id>http://wanderyt.github.io/2018/02/12/Fetch-vs-Axios/</id>
    <published>2018-02-12T01:43:22.000Z</published>
    <updated>2019-08-05T03:05:12.831Z</updated>
    
    <content type="html"><![CDATA[<p>写React项目与后端进行交互的时候，之前一直是在使用fetch方法，然而fetch方法有几个缺点需要注意。<br>同时对比一下最近很火的<code>axios.js</code>，发现可以考虑开始使用新的类库了。</p><h3 id="Fetch-data"><a href="#Fetch-data" class="headerlink" title="Fetch data"></a>Fetch data</h3><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>调用fetch api拿到response之后，通常我们需要两步来解析response中的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'some_api_url'</span>;</span><br><span class="line">fetch(url).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>response中的数据有status，还有body。但会发现body的数据类型是一个<code>ReadableStream</code>而不是一个正常的json或者string。我们需要用<code>response.json()</code>来进行转换。注意这个方法是返回一个promise对象，所以要继续调用<code>then</code>来解析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'some_api_url'</span>;</span><br><span class="line">fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>这时的data就是我们需要的json或者string数据。</p><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><pre><code>$ npm install --save axios</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React - ES6</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// Nodejs</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="comment">// HTML</span></span><br><span class="line"><span class="keyword">const</span> lib_url = <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.3/axios.min.js'</span></span><br></pre></td></tr></table></figure><p>使用时和fetch类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response));</span><br></pre></td></tr></table></figure><p>可以看到response的数据结构和jquery接口很像，包含了status和data。status是请求返回的状态码，data就是response的数据主体。跟fetch对比起来要少一步promise解析。</p><h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><h4 id="fetch-1"><a href="#fetch-1" class="headerlink" title="fetch"></a>fetch</h4><p>遇到错误处理，通常是使用catch方法来进行捕捉，但是使用fetch时，这种方法会失效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'wrong_api_url'</span>;</span><br><span class="line">fetch(url)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'BAD'</span>, error))</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'GOOD'</span>, response));</span><br></pre></td></tr></table></figure><p>使用一个错误的api url，但是看结果会发现还是进入了then的回调函数中。只是状态码变成了400。</p><h4 id="axios-1"><a href="#axios-1" class="headerlink" title="axios"></a>axios</h4><p>使用axios时，catch中的回调函数就会被调用到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'wrong_api_url'</span>;</span><br><span class="line">axios(url)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'BAD'</span>, error))</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'GOOD'</span>, response));</span><br></pre></td></tr></table></figure><p>打出的error log是：</p><pre><code>BAD ERROR: Request failed with status code 400</code></pre><p>可以看出在这两方面中，axios确实是比fetch好用很多。</p><p>参考来源：</p><p><a href="https://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5" target="_blank" rel="noopener">Fetch vs. Axios.js for making http requests</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写React项目与后端进行交互的时候，之前一直是在使用fetch方法，然而fetch方法有几个缺点需要注意。&lt;br&gt;同时对比一下最近很火的&lt;code&gt;axios.js&lt;/code&gt;，发现可以考虑开始使用新的类库了。&lt;/p&gt;
&lt;h3 id=&quot;Fetch-data&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Nodejs" scheme="http://wanderyt.github.io/tags/Nodejs/"/>
    
      <category term="React" scheme="http://wanderyt.github.io/tags/React/"/>
    
      <category term="ES6" scheme="http://wanderyt.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Create react app with customized backend API</title>
    <link href="http://wanderyt.github.io/2018/02/07/Create-react-app-with-customized-backend-API/"/>
    <id>http://wanderyt.github.io/2018/02/07/Create-react-app-with-customized-backend-API/</id>
    <published>2018-02-07T07:41:25.000Z</published>
    <updated>2019-08-05T03:05:12.828Z</updated>
    
    <content type="html"><![CDATA[<p>目前在做一个图片展示页面，使用的是<code>create-react-app</code>搭建起来的react应用。只是突发奇想页面渲染过程中，如何能把图片保存在server端。</p><p>直接在React代码中使用保存文件的api目前还没有找到，所以只能寄希望于<code>nodejs</code>端来解决保存问题。</p><p>大概在网上搜了一下，目前普遍的做法跟自己想的比较类似，就是在<code>nodejs</code>自定义一个保存图片的api，然后React代码中发送api请求，nodejs端捕获，并且保存对应的图片到server文件系统中。</p><p>实践起来还是比较复杂的，中间遇到的问题也不少。</p><h3 id="搭建Nodejs-Server"><a href="#搭建Nodejs-Server" class="headerlink" title="搭建Nodejs Server"></a>搭建Nodejs Server</h3><a id="more"></a><p>使用<code>express</code>迅速搭建一个server，端口号暂定为5000。（Create React App默认的Webpack Server端口为3000）</p><p><strong>server/server.js</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/downloadPicture'</span>, (req, resp) =&gt; &#123;</span><br><span class="line">    resp.send(<span class="string">'download success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>接下来先模拟写一个图片下载的服务。目前项目里抓取的都是twitter上的图片，所以拿一个例子来说明。</p><p>图片：”<a href="https://pbs.twimg.com/media/DUWPzZ7W4AExatH.jpg&quot;" target="_blank" rel="noopener">https://pbs.twimg.com/media/DUWPzZ7W4AExatH.jpg&quot;</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.get (&#123;</span><br><span class="line">    path: <span class="string">`https://pbs.twimg.com/media/DUWPzZ7W4AExatH.jpg`</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    response.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"saved png"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>报错：<strong>Error: connect ECONNREFUSED</strong></p><p>这个错误是说明无法与服务器连接。debug很久才发现，图片是存放在twitter网站的静态资源，需要翻墙使用代理才能下载到。加上公司的proxy，这个图片才算是能正常下载下来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http.get (&#123;</span><br><span class="line">    host: host, <span class="comment">// proxy host</span></span><br><span class="line">    port: port, <span class="comment">// proxy port</span></span><br><span class="line">    path: <span class="string">`https://pbs.twimg.com/media/DUWPzZ7W4AExatH.jpg`</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    mkdirp(<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span><span class="subst">$&#123;path.sep&#125;</span>downloadImages`</span>, (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> imageFile = fs.createWriteStream(<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span><span class="subst">$&#123;path.sep&#125;</span>downloadImages<span class="subst">$&#123;path.sep&#125;</span><span class="subst">$&#123;imgName&#125;</span>`</span>);</span><br><span class="line">        response.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">            imageFile.write(chunk);</span><br><span class="line">        &#125;);</span><br><span class="line">        response.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"saved png"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<code>mkdirp</code>是因为需要自动创建下载目录。<code>fs.writeFileSync</code>不负责创建路径。事实上，如果路径不存在，会直接报错导致程序中断。</p><p>图片的写入需要创建一个fileStream来实现。给repsonse上绑一个data的监听事件，一旦是有数据返回就往stream上写数据流直到response返回结束。</p><p>至此，nodejs api编写完成。</p><h3 id="React发送请求"><a href="#React发送请求" class="headerlink" title="React发送请求"></a>React发送请求</h3><p>在React中，在<code>componentDidMount</code>中发送请求，这样就不会阻塞页面的加载渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    fetch(<span class="string">`http://localhost:5000/api/downloadPicture?img=<span class="subst">$&#123;img&#125;</span>&amp;type=twitter`</span>).then(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(resp);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接使用5000端口的API端点，前端会直接报错。这里存在一个跨域请求的访问，出于安全考虑，浏览器会禁止这类访问，并将请求状态置为500。所以我们只能使用3000端口。但如何把端口从3000映射到nodejs的5000端口上？</p><p>此时需要在<code>package.json</code>里增加一行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  //...</span><br><span class="line">  "proxy": "http://localhost:5000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这个proxy的定义，只在网上找到这么一句解释：</p><blockquote><p>A proxy to use for outgoing https requests. If the HTTPS_PROXY or https_proxy or HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying request library.</p></blockquote><p>大概就是如果使用了<code>proxy</code>，所有HTTP / HTTPS的请求都会被代理到proxy设定的域名下。这样我们就可以调用localhost:5000下的服务了。</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>前后端相应的配置都已经完成，还剩最后一步：启动两个服务器。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  //...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node scripts/start.js",</span><br><span class="line">    "poststart": "node server/server.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很遗憾，这样写并不能启动我们自定义的服务器。node是单线程，启动了create-react-app的服务器之后，就会一直监听在那里，不会再执行第二步命令。所以需要<code>concurrently</code>库来帮助。</p><p><code>concurrently</code>可以“同时”执行多个命令。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  //...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node scripts/start.js",</span><br><span class="line">    "mystart": "concurrently --kill-others-on-fail \"node server/server.js\" \"npm run start\""</span><br><span class="line">  &#125;,</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数<code>kill-others-on-fail</code>是当某一个命令失败后，同时结束其他命令。这样我们就可以保证两个服务器同时启动。</p><hr><p>参考来源：</p><p><a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/" target="_blank" rel="noopener">How to get “create-react-app” to work with your API</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前在做一个图片展示页面，使用的是&lt;code&gt;create-react-app&lt;/code&gt;搭建起来的react应用。只是突发奇想页面渲染过程中，如何能把图片保存在server端。&lt;/p&gt;
&lt;p&gt;直接在React代码中使用保存文件的api目前还没有找到，所以只能寄希望于&lt;code&gt;nodejs&lt;/code&gt;端来解决保存问题。&lt;/p&gt;
&lt;p&gt;大概在网上搜了一下，目前普遍的做法跟自己想的比较类似，就是在&lt;code&gt;nodejs&lt;/code&gt;自定义一个保存图片的api，然后React代码中发送api请求，nodejs端捕获，并且保存对应的图片到server文件系统中。&lt;/p&gt;
&lt;p&gt;实践起来还是比较复杂的，中间遇到的问题也不少。&lt;/p&gt;
&lt;h3 id=&quot;搭建Nodejs-Server&quot;&gt;&lt;a href=&quot;#搭建Nodejs-Server&quot; class=&quot;headerlink&quot; title=&quot;搭建Nodejs Server&quot;&gt;&lt;/a&gt;搭建Nodejs Server&lt;/h3&gt;
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Nodejs" scheme="http://wanderyt.github.io/tags/Nodejs/"/>
    
      <category term="React" scheme="http://wanderyt.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>module.exports vs exports vs export</title>
    <link href="http://wanderyt.github.io/2018/02/05/module-exports-vs-exports-vs-export/"/>
    <id>http://wanderyt.github.io/2018/02/05/module-exports-vs-exports-vs-export/</id>
    <published>2018-02-05T07:47:31.000Z</published>
    <updated>2019-08-05T03:05:12.835Z</updated>
    
    <content type="html"><![CDATA[<p>模块导出的声明语句有很多种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> david = <span class="string">'David'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> david;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    hiDavid: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hi David!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Nodejs遵循的是CommonJS规范，使用<code>require</code>方法来加载模块，而ES6中是使用<code>import</code>来加载模块。参考这个图片：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBede5c09950ee9a19febbf7d2181ab39c?method=download&amp;shareKey=f54086d77f07614dde2260d2fce3fb59" alt="commonjs-es6"></p><h3 id="module-export-vs-exports"><a href="#module-export-vs-exports" class="headerlink" title="module.export vs exports"></a>module.export vs exports</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">exports, <span class="built_in">require</span>, <span class="built_in">module</span>, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>require</code>规范下<code>module</code>和<code>exports</code>都是内置的变量。但是<code>exports</code>是被<code>module.exports</code>引用的，所以给任意其一赋值都是可行的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// working</span></span><br><span class="line"><span class="built_in">module</span>.exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// working</span></span><br><span class="line">exports.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种情况下，模块导出的是包含两个方法的对象。但是对比下面的声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// working</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NOT Working!!</span></span><br><span class="line">exports.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种情况下，第二个声明失效，因为<code>module.exports</code>已经被直接赋值，<code>exports</code>会被忽略。<br>另外，因为<code>exports</code>只是一个变量，所以直接给其赋值也是无意义的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// working</span></span><br><span class="line"><span class="built_in">module</span>.exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NOT Working!!</span></span><br><span class="line">exports = &#123;</span><br><span class="line">    hi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><p><code>require</code>方法无法识别<code>export</code>导出语句，会直接报错。因此<code>Nodejs</code>环境下只能使用<code>module.exports</code>或者<code>exports</code>语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> david = <span class="string">'David'</span>;</span><br><span class="line">exports.default = david;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./module.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>); <span class="comment">// &#123;hello: function, hi: function, default: "David"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p><code>import</code>语句可以识别<code>module.exports</code>、<code>exports</code>和<code>export</code>语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> david = <span class="string">'david'</span>;</span><br><span class="line"><span class="keyword">const</span> hiDavid = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi David'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> david;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    hiDavid</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> test, &#123;hello&#125; <span class="keyword">from</span> <span class="string">'./module.js'</span>;</span><br><span class="line"><span class="keyword">import</span> TestModule <span class="keyword">from</span> <span class="string">'./module.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test);        <span class="comment">// david</span></span><br><span class="line"><span class="built_in">console</span>.log(hello);       <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(TestModule);  <span class="comment">// &#123;hello: function, hi: function, default: "david", hiDavid: function&#125;</span></span><br></pre></td></tr></table></figure><p>可以猜想到，<code>import</code>方法中，<code>export default</code>和<code>exports.default</code>是被认为相似的声明，而且不会强制认为必须是相同的导出导入名称匹配。</p><p>这种互通，在<code>Server Side Rendering</code>技术中会有更好的体现。在服务器渲染技术中，我们需要找到一种声明在ES6模块（比如React代码）和Nodejs中都可以被识别，这种情况下，使用<code>module.exports</code> / <code>exports</code>顶替<code>export</code>会是更好的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模块导出的声明语句有很多种：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
      <category term="Nodejs" scheme="http://wanderyt.github.io/tags/Nodejs/"/>
    
      <category term="Module" scheme="http://wanderyt.github.io/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>offset vs client vs scroll</title>
    <link href="http://wanderyt.github.io/2018/02/05/offset-vs-client-vs-scroll/"/>
    <id>http://wanderyt.github.io/2018/02/05/offset-vs-client-vs-scroll/</id>
    <published>2018-02-05T06:31:59.000Z</published>
    <updated>2019-08-05T03:05:12.835Z</updated>
    
    <content type="html"><![CDATA[<p>先上一张神图：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB087e821ef9aacd904787a060a7933c6d?method=download&amp;shareKey=54de0ea6d2cdae27470bbbab065ce521" alt="offset-client-scroll"></p><p>以<code>height</code>为例：</p><h3 id="offsetHeight"><a href="#offsetHeight" class="headerlink" title="offsetHeight"></a>offsetHeight</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight" target="_blank" rel="noopener">MDN Definition</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is <span class="keyword">a</span> measurement which includes <span class="keyword">the</span> <span class="keyword">element</span> borders, <span class="keyword">the</span> <span class="keyword">element</span> vertical padding, <span class="keyword">the</span> <span class="keyword">element</span> horizontal scrollbar (<span class="keyword">if</span> present, <span class="keyword">if</span> rendered) <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">element</span> CSS height.</span><br></pre></td></tr></table></figure><pre><code>offsetHeight = 可看到的元素高度 + 纵向padding + 边框高度 + 横向滚动条高度</code></pre><h3 id="clientHeight"><a href="#clientHeight" class="headerlink" title="clientHeight"></a>clientHeight</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight" target="_blank" rel="noopener">MDN Definition</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">returns <span class="keyword">the</span> inner height <span class="keyword">of</span> <span class="keyword">an</span> <span class="keyword">element</span> <span class="keyword">in</span> pixels, including padding but <span class="keyword">not</span> <span class="keyword">the</span> horizontal scrollbar height, border, <span class="keyword">or</span> margin</span><br></pre></td></tr></table></figure><pre><code>clientHeight = 可看到的元素高度 + 纵向padding - 横向滚动条高度</code></pre><h3 id="scrollHeight"><a href="#scrollHeight" class="headerlink" title="scrollHeight"></a>scrollHeight</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight" target="_blank" rel="noopener">MDN Definition</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">is</span> a measurement <span class="keyword">of</span> <span class="keyword">the</span> height <span class="keyword">of</span> an element's content including content <span class="keyword">not</span> visible <span class="keyword">on</span> <span class="keyword">the</span> screen due <span class="keyword">to</span> overflow</span><br></pre></td></tr></table></figure><pre><code>scrollHeight = 可看到的元素高度 + 看不到的元素高度 + 纵向padding</code></pre><p>参考文章来源：</p><p><a href="http://www.programering.com/a/MTM2QTNwATA.html" target="_blank" rel="noopener">The properties of offsetTop, clientTop, scrollTop in the JS</a><br><a href="https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight" target="_blank" rel="noopener">What is offsetHeight, clientHeight, scrollHeight?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先上一张神图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/WEB087e821ef9aacd904787a060a7933c6d?method=download&amp;amp;shareKey=5
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
      <category term="css" scheme="http://wanderyt.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Forbidden storage api</title>
    <link href="http://wanderyt.github.io/2017/09/11/Forbidden-storage-api/"/>
    <id>http://wanderyt.github.io/2017/09/11/Forbidden-storage-api/</id>
    <published>2017-09-11T02:28:16.000Z</published>
    <updated>2019-08-05T03:05:12.831Z</updated>
    
    <content type="html"><![CDATA[<p>Recently when I tried to debug in safari incognito mode, an error always occurs:</p><pre><code>[Error] QuotaExceededError (DOM Exception 22): The quota has been exceeded.</code></pre><p>The root cause is that: storage api, like <code>localStorage</code> / <code>sessionStorage</code> is not supported in safari incognito mode.</p><p>According to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Testing_for_availability" target="_blank" rel="noopener">MDN wiki</a>, the localStorage is set as an object with a quota of zero, which will make it unusable.</p><p>A way is required to detect whether the storage api is available under current browser session.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">storageAvailable</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> storage = <span class="built_in">window</span>[type],</span><br><span class="line">            x = <span class="string">'__storage_test__'</span>;</span><br><span class="line">        storage.setItem(x, x);</span><br><span class="line">        storage.removeItem(x);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> e <span class="keyword">instanceof</span> DOMException &amp;&amp; (</span><br><span class="line">            <span class="comment">// everything except Firefox</span></span><br><span class="line">            e.code === <span class="number">22</span> ||</span><br><span class="line">            <span class="comment">// Firefox</span></span><br><span class="line">            e.code === <span class="number">1014</span> ||</span><br><span class="line">            <span class="comment">// test name field too, because code might not be present</span></span><br><span class="line">            <span class="comment">// everything except Firefox</span></span><br><span class="line">            e.name === <span class="string">'QuotaExceededError'</span> ||</span><br><span class="line">            <span class="comment">// Firefox</span></span><br><span class="line">            e.name === <span class="string">'NS_ERROR_DOM_QUOTA_REACHED'</span>) &amp;&amp;</span><br><span class="line">            <span class="comment">// acknowledge QuotaExceededError only if there's something already stored</span></span><br><span class="line">            storage.length !== <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (storageAvailable(<span class="string">'localStorage'</span>)) &#123; <span class="comment">// or storageAvailable('sessionStorage')</span></span><br><span class="line">    <span class="comment">// use local storage</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Too bad, no localStorage for us</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently when I tried to debug in safari incognito mode, an error always occurs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Error] QuotaExceededError (DOM Exception
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Require in Node.js</title>
    <link href="http://wanderyt.github.io/2017/09/06/Require-in-Node-js/"/>
    <id>http://wanderyt.github.io/2017/09/06/Require-in-Node-js/</id>
    <published>2017-09-06T06:07:43.000Z</published>
    <updated>2019-08-05T03:05:12.833Z</updated>
    
    <content type="html"><![CDATA[<p>Post source: <a href="https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8" target="_blank" rel="noopener">Requiring modules in Node.js: Everything you need to know</a></p><p>这篇文章主要介绍require方法在nodejs开发中的一些应用技巧。除此之外，模块化开发也会有一些涉及。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'/path/to/config'</span>);</span><br></pre></td></tr></table></figure><p>针对<code>require()</code>方法，Node的执行步骤主要分以下5步。</p><ol><li>转义。将相对路径转义（resolve）为绝对路径。</li><li>装载。在这一步中，VM并非会去执行所加载的模块代码。其主要是分析对应路径下的文件是哪种类型，比如.js、.json甚至是c++文件。</li><li>封装。将装载的文件代码封装到一个私有的上下文中，并使其变为可执行代码。</li><li>执行。这一步中，Node的VM才会去执行所装载的代码。</li><li>缓存。将所加载的文件缓存起来，以便下次再require时不需要将前几个步骤再重复一遍。</li></ol><a id="more"></a><h4 id="转义-Resolve"><a href="#转义-Resolve" class="headerlink" title="转义 - Resolve"></a>转义 - Resolve</h4><p>在这一步中，require方法会将文件的路径转为绝对路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'find-me'</span>);</span><br></pre></td></tr></table></figure><p>Node会查找所有<code>module.paths</code>指定的所有路径下的<code>find-me.js</code>文件。可以通过module.paths方法查看当前查找路径的优先级顺序。</p><pre><code>$ node&gt; module.paths[ &apos;/Users/username/stubhub/techspace/my-react-story-book/repl/node_modules&apos;,&apos;/Users/username/stubhub/techspace/my-react-story-book/node_modules&apos;,&apos;/Users/username/stubhub/techspace/node_modules&apos;,&apos;/Users/username/stubhub/node_modules&apos;,&apos;/Users/username/node_modules&apos;,&apos;/Users/node_modules&apos;,&apos;/node_modules&apos;,&apos;/Users/username/.node_modules&apos;,&apos;/Users/username/.node_libraries&apos;,&apos;/usr/local/lib/node&apos; ]</code></pre><p>如果这个文件没有找到，则会报错：<code>cannot find module error.</code>。</p><p>相对应的，在项目目录下创建一个<code>node_modules</code>文件夹，其中包含一个<code>find-me.js</code>。这样也能require到。</p><pre><code>$ mkdir node_modules$ echo console.log(&apos;I am not lost&apos;);&quot; &gt; node_modules/find-me.js$ node&gt; require(&apos;find-me&apos;);I am not lost</code></pre><h4 id="require文件夹"><a href="#require文件夹" class="headerlink" title="require文件夹"></a>require文件夹</h4><p>模块化概念中，一个模块不仅仅只是一个文件，还有可能是一个文件夹。可以在<code>node_modules</code>下创建一个<code>find-me</code>文件夹，然后再在其下创建<code>index.js</code>文件，这样也能require到。</p><pre><code>$ mkdir -p node_modules/find-me$ echo &quot;console.log(&apos;Found again.&apos;);&quot; &gt; node_modules/find-me/index.js$ node&gt; require(&apos;find-me&apos;);Found again.</code></pre><p><code>index.js</code>是默认的模块入口文件。也可以通过在<code>package.json</code>中配置对应的入口文件名来更改。</p><pre><code>$ echo &quot;console.log(&apos;I rule&apos;);&quot; &gt; node_modules/find-me/start.js$ echo &apos;{ &quot;name&quot;: &quot;find-me-folder&quot;, &quot;main&quot;: &quot;start.js&quot; }&apos; &gt; node_modules/find-me/package.json$ node&gt; require(&apos;find-me&apos;);I rule</code></pre><h4 id="require-resolve"><a href="#require-resolve" class="headerlink" title="require.resolve"></a>require.resolve</h4><p>当我们需要查找确定某一个模块能否被require到（并非需要真去加载执行这个模块），可以用<code>require.resolve(moduleName)</code>来检查。如果模块存在，返回模块的路径；如果不存在，则与<code>require</code>方法一样报错。这对于去引用在<code>package.json</code>中<code>optionalDependencies</code>下定义的模块引用很有用处。</p><pre><code>$ node&gt; require.resolve(&apos;find-me&apos;);&apos;/Users/samer/learn-node/node_modules/find-me/start.js&apos;&gt; require.resolve(&apos;not-there&apos;);Error: Cannot find module &apos;not-there&apos;</code></pre><h4 id="相对路径-vs-绝对路径"><a href="#相对路径-vs-绝对路径" class="headerlink" title="相对路径 vs 绝对路径"></a>相对路径 vs 绝对路径</h4><p>定义模块路径方面，相对路径以<code>./</code>或者<code>../</code>作为开头，而绝对路径以<code>/</code>作为开头。</p><h4 id="模块相互引用"><a href="#模块相互引用" class="headerlink" title="模块相互引用"></a>模块相互引用</h4><p>创建一个<code>lib/util.js</code>文件和<code>index.js</code>文件，并输出当前<code>module</code>，可以看出node对循环引用的支持。</p><pre><code>$ mkdir lib$ echo &quot;console.log(&apos;In util&apos;, module);&quot; &gt; lib/util.js$ echo &quot;console.log(&apos;In index&apos;, module); require(&apos;./lib/util&apos;);&quot; &gt; index.js</code></pre><p>执行<code>index.js</code>文件，可以看到下列输出。</p><pre><code>$ node index.jsIn index Module {    id: &apos;.&apos;,    exports: {},    parent: null,    filename: &apos;/Users/samer/learn-node/index.js&apos;,    loaded: false,    children: [],    paths: [ ... ] }In util Module {    id: &apos;/Users/samer/learn-node/lib/util.js&apos;,    exports: {},    parent:        Module {            id: &apos;.&apos;,            exports: {},            parent: null,            filename: &apos;/Users/samer/learn-node/index.js&apos;,            loaded: false,            children: [ [Circular] ],            paths: [...] },    filename: &apos;/Users/samer/learn-node/lib/util.js&apos;,    loaded: false,    children: [],    paths: [...] }</code></pre><p>可以看到，在module util中，指出了其父模块为<code>index</code>，但是父模块的介绍中，<code>children</code>的属性被标为<code>[Circular]</code>，否则会陷入无限循环。</p><p>这就引申出了另外一个模块循环引用的问题：如果<code>util</code>模块又引用了<code>index</code>模块？</p><h4 id="exports-module-exports"><a href="#exports-module-exports" class="headerlink" title="exports / module.exports"></a>exports / module.exports</h4><p>对之前两个模块添加<code>exports</code>输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add the following line at the top of lib/util.js</span></span><br><span class="line">exports.id = <span class="string">'lib/util'</span>;</span><br><span class="line"><span class="comment">// Add the following line at the top of index.js</span></span><br><span class="line">exports.id = <span class="string">'index'</span>;</span><br></pre></td></tr></table></figure><p>这时，module的输出就变成：</p><pre><code>$ node index.jsIn index Module {    id: &apos;.&apos;,    exports: { id: &apos;index&apos; },    loaded: false,    ... }In util Module {    id: &apos;/Users/samer/learn-node/lib/util.js&apos;,    exports: { id: &apos;lib/util&apos; },    parent:    Module {        id: &apos;.&apos;,        exports: { id: &apos;index&apos; },        loaded: false,        ... },    loaded: false,    ... }</code></pre><p>通常定义module的输出会使用下列语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">exports.id = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TBD</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    a: <span class="string">'A'</span>,</span><br><span class="line">    b: <span class="string">'B'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看一下node module包装之后的代码，理解会更加深刻：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> exports = <span class="built_in">module</span>.exports;</span><br><span class="line">    <span class="comment">// Your Module Code...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接给<code>exports</code>赋值则不会生效，因为这只是改变了<code>exports</code>这个变量，但是输出的<code>module.exports</code>没有任何变化。如果是给<code>exports</code>添加更多的属性，则会生效。</p><h4 id="loaded关键字"><a href="#loaded关键字" class="headerlink" title="loaded关键字"></a>loaded关键字</h4><p><code>loaded</code>关键字标示模块是否已经加载完成。可以通过<code>setImmediate</code>方法来检查这个标志。<code>setImmediate</code>方法是在当次event loop结束之后立刻执行。对于加载一个模块来说，event loop就是一次require/load模块的过程，所以下列两种代码执行的效果是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module A</span></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the module is loaded!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is module!'</span>);</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// module B</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is module!'</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the module is loaded!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样，当模块加载完成时，<code>exports</code>对象也立刻执行完毕，所以想通过异步来改变模块输出的数据，是不会成功的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">'/etc/passwd'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    exports.data = data; <span class="comment">// won't work.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>现在再来看循环引用的案例。创建两个模块：<code>lib/moduleA</code>和<code>lib/moduleB</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/moduleA.js</span></span><br><span class="line">exports.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./moduleB'</span>);</span><br><span class="line">exports.b = <span class="number">2</span>;</span><br><span class="line">exports.c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib/moduleB.js</span></span><br><span class="line"><span class="keyword">const</span> ModuleA = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ModuleA is partially loaded here'</span>, ModuleA);</span><br></pre></td></tr></table></figure><p>执行<code>node moduleA.js</code>时，会得到下列输出：</p><pre><code>$ node lib/module1.jsModule1 is partially loaded here { a: 1 }</code></pre><p>可以看出node对循环引用的支持，依据的原则就是：在加载过程中创建<code>exports</code>对象。如果在加载结束前引用了模块，则只能得到当前执行之后的模块输出。</p><h4 id="node的封装"><a href="#node的封装" class="headerlink" title="node的封装"></a>node的封装</h4><p>通过一句语句就能看出node是对模块进行了封装后再加载：</p><pre><code>$ node&gt; require(&apos;module&apos;).wrapper[ &apos;(function (exports, require, module, __filename, __dirname) { &apos;,&apos;\n});&apos; ]</code></pre><p>这五个参数会经常在模块中用到。<code>exports</code>是对<code>module.exports</code>的引用，<code>require</code>和<code>module</code>是执行模块代码必用的函数。<code>__filename</code>和<code>__dirname</code>是封装的模块的文件名和绝对路径。</p><p>也可以通过<code>arguments</code>来输出这几个参数：</p><pre><code>$ echo &quot;console.log(arguments)&quot; &gt; index.js$ node index.js{ &apos;0&apos;: {},&apos;1&apos;:{ [Function: require]    resolve: [Function: resolve],    main:    Module {        id: &apos;.&apos;,        exports: {},        parent: null,        filename: &apos;/Users/username/index.js&apos;,        loaded: false,        children: [],        paths: [Object] },    extensions: { &apos;.js&apos;: [Function], &apos;.json&apos;: [Function], &apos;.node&apos;: [Function] },    cache: { &apos;/Users/username/index.js&apos;: [Object] } },&apos;2&apos;:Module {    id: &apos;.&apos;,    exports: {},    parent: null,    filename: &apos;/Users/username/index.js&apos;,    loaded: false,    children: [],    paths:    [ &apos;/Users/username/node_modules&apos;,        &apos;/Users/node_modules&apos;,        &apos;/node_modules&apos; ] },&apos;3&apos;: &apos;/Users/username/index.js&apos;,&apos;4&apos;: &apos;/Users/username&apos; }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Post source: &lt;a href=&quot;https://medium.freecodecamp.org/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Requiring modules in Node.js: Everything you need to know&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章主要介绍require方法在nodejs开发中的一些应用技巧。除此之外，模块化开发也会有一些涉及。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; config = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;/path/to/config&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;针对&lt;code&gt;require()&lt;/code&gt;方法，Node的执行步骤主要分以下5步。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;转义。将相对路径转义（resolve）为绝对路径。&lt;/li&gt;
&lt;li&gt;装载。在这一步中，VM并非会去执行所加载的模块代码。其主要是分析对应路径下的文件是哪种类型，比如.js、.json甚至是c++文件。&lt;/li&gt;
&lt;li&gt;封装。将装载的文件代码封装到一个私有的上下文中，并使其变为可执行代码。&lt;/li&gt;
&lt;li&gt;执行。这一步中，Node的VM才会去执行所装载的代码。&lt;/li&gt;
&lt;li&gt;缓存。将所加载的文件缓存起来，以便下次再require时不需要将前几个步骤再重复一遍。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
      <category term="Nodejs" scheme="http://wanderyt.github.io/tags/Nodejs/"/>
    
      <category term="Module" scheme="http://wanderyt.github.io/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>Flex Notes</title>
    <link href="http://wanderyt.github.io/2017/08/02/Flex-Notes/"/>
    <id>http://wanderyt.github.io/2017/08/02/Flex-Notes/</id>
    <published>2017-08-02T05:34:15.000Z</published>
    <updated>2019-08-05T03:05:12.831Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have learned some basic rules about <code>flex</code> layout based on this post <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A complete guide to Flexbox</a>.</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Right beginning: <code>display: flex</code> only affects the items inside the container, but of course for the container, it is a <code>block</code> element. So the container will possess one line of the page.</p><p>Also, it is a 1-dimensional layout, mainly focuses on line layout. Really friendly to responsive design.</p><p>For comparison, there is another layout style named <code>grid</code>. It is covered by another post <a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">A complete guide to Grid</a>. Will discuss that in future posts.</p><h3 id="Main-Properties"><a href="#Main-Properties" class="headerlink" title="Main Properties"></a>Main Properties</h3><h4 id="display-container"><a href="#display-container" class="headerlink" title="display | container"></a>display | container</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    display: flex; // another value: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>inline-flex</code> will only affect the container to be an <code>inline</code> element. The items inside the container are placed as <code>inline</code> elements no matter it is <code>flex</code> or <code>inline-flex</code>.</p><h4 id="flex-direction-container"><a href="#flex-direction-container" class="headerlink" title="flex-direction | container"></a>flex-direction | container</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-order-item"><a href="#flex-order-item" class="headerlink" title="flex-order | item"></a>flex-order | item</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    flex-order: 1; // any other integer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Place items in the sequence of <code>flex-order</code>.</p><h4 id="flex-grow-item"><a href="#flex-grow-item" class="headerlink" title="flex-grow | item"></a>flex-grow | item</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    flex-grow: 1; // any positive number or by default 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>If all items <code>flex-grow</code> is 0, no extra space will be distributed to all items.</strong></p><iframe id="cp_embed_YxWOdO" src="//codepen.io/wanderyt/embed/YxWOdO?height=500&theme-id=twilight&slug-hash=YxWOdO&default-tab=result" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 1000; overflow: hidden;"></iframe><h4 id="flex-wrap-container"><a href="#flex-wrap-container" class="headerlink" title="flex-wrap | container"></a>flex-wrap | container</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nowrap</code> will put all items in one line.</p><iframe id="cp_embed_YxWOdO" src="//codepen.io/wanderyt/embed/YxWOdO?height=500&theme-id=twilight&slug-hash=YxWOdO&default-tab=result" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 1000; overflow: hidden;"></iframe><h4 id="flex-shrink-item"><a href="#flex-shrink-item" class="headerlink" title="flex-shrink | item"></a>flex-shrink | item</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    flex-shrink: 1; // any integer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_vJKvyd" src="//codepen.io/wanderyt/embed/vJKvyd?height=500&theme-id=twilight&slug-hash=vJKvyd&default-tab=result" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 1000; overflow: hidden;"></iframe><h4 id="flex-flow-container"><a href="#flex-flow-container" class="headerlink" title="flex-flow | container"></a>flex-flow | container</h4><p>Combination for <code>flex-direction</code> and <code>flex-wrap</code>.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    flex-flow: 'flex-direction' || 'flex-wrap'; // default 'row nowrap'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-basis-item"><a href="#flex-basis-item" class="headerlink" title="flex-basis | item"></a>flex-basis | item</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>length</code> would be a real valid number like <code>80px</code>.<br>If it is a valid length value, it means the item should use this as its width.<br>If it is <code>0</code>, <em>the extra space around content in an item</em> is not counted in when distributing the rest space in line of flex container.<br>If it is <code>auto</code>, <em>the extra space around content in an item</em> is distributed based on its <code>flex-grow</code> value.</p><p>See <a href="https://www.w3.org/TR/css-flexbox-1/images/rel-vs-abs-flex.svg" target="_blank" rel="noopener">this picture</a> to figure out its usage.</p><h4 id="justify-content-container"><a href="#justify-content-container" class="headerlink" title="justify-content | container"></a>justify-content | container</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_rzLPjp" src="//codepen.io/wanderyt/embed/rzLPjp?height=500&theme-id=twilight&slug-hash=rzLPjp&default-tab=result" scrolling="no" frameborder="no" height="500" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 1000; overflow: hidden;"></iframe><h4 id="flex-item"><a href="#flex-item" class="headerlink" title="flex | item"></a>flex | item</h4><p>Combination for <code>flex-grow</code>, <code>flex-shrink</code> and <code>flex-basis</code>.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex-shrink</code> and <code>flex-basis</code> are optional. By default, <code>0 1 auto</code>.</p><h3 id="Incompatible-Setting"><a href="#Incompatible-Setting" class="headerlink" title="Incompatible Setting"></a>Incompatible Setting</h3><p>Note that <code>float</code>, <code>clear</code> and <code>vertical-align</code> is not working under <code>flex</code> layout.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have learned some basic rules about &lt;code&gt;flex&lt;/code&gt; layout based on this post &lt;a href=&quot;https://css-tricks.com/snippets/css/a
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="css" scheme="http://wanderyt.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>React on the Road - Chapter 1</title>
    <link href="http://wanderyt.github.io/2017/07/31/React-on-the-Road/"/>
    <id>http://wanderyt.github.io/2017/07/31/React-on-the-Road/</id>
    <published>2017-07-31T01:41:30.000Z</published>
    <updated>2019-08-05T03:05:12.833Z</updated>
    
    <content type="html"><![CDATA[<p>This is just to record all the issues I met during React development.</p><h3 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h3><p>Issue blog: <a href="https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e" target="_blank" rel="noopener">What’s the difference between “super()” and “super(props)” in React when using es6 classes?</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if you want to access `this.props` in constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)</span><br><span class="line">        <span class="comment">// -&gt; &#123; icon: 'home', … &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If you do not want to access `this.props` in constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)</span><br><span class="line">        <span class="comment">// -&gt; undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Props parameter is still available</span></span><br><span class="line">        <span class="built_in">console</span>.log(props)</span><br><span class="line">        <span class="comment">// -&gt; &#123; icon: 'home', … &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// No difference outside constructor</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)</span><br><span class="line">        <span class="comment">// -&gt; &#123; icon: 'home', … &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DisplayName"><a href="#DisplayName" class="headerlink" title="DisplayName"></a>DisplayName</h3><p><code>SomeComponent.displayName</code> is just to identify the name of current module.</p><p>No functional use, just to help the debug to be clear.</p><p>Issue blog: <a href="https://stackoverflow.com/questions/41581130/what-is-react-component-displayname-is-used-for" target="_blank" rel="noopener">What is React component ‘displayName’ is used for?</a></p><p>React source code during debugging: <a href="https://github.com/facebook/react/blob/90294ead4c627715cb70f20ff448bb0d34ee4c1b/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L50-L52" target="_blank" rel="noopener">Debug code in react</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnIfInvalidElement</span>(<span class="params">Component, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    warning(</span><br><span class="line">      element === <span class="literal">null</span> || element === <span class="literal">false</span> || React.isValidElement(element),</span><br><span class="line">      <span class="string">'%s(...): A valid React element (or null) must be returned. You may have '</span> +</span><br><span class="line">      <span class="string">'returned undefined, an array or some other invalid object.'</span>,</span><br><span class="line">      Component.displayName || Component.name || <span class="string">'Component'</span></span><br><span class="line">    );</span><br><span class="line">    warning(</span><br><span class="line">      !Component.childContextTypes,</span><br><span class="line">      <span class="string">'%s(...): childContextTypes cannot be defined on a functional component.'</span>,</span><br><span class="line">      Component.displayName || Component.name || <span class="string">'Component'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Context-of-Method"><a href="#Context-of-Method" class="headerlink" title="Context of Method"></a>Context of Method</h3><p>For the following code snippet:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreaserPanel</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            counter: <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Bind increaserMock with this context so that this.increaserMock could be used correctly</span></span><br><span class="line">        <span class="keyword">this</span>.increaserMock =  <span class="keyword">this</span>.increaserMock.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increaser() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// output is null if using &#123;this.increaser&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            counter: <span class="keyword">this</span>.state.counter + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increaserMock() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            counter: <span class="keyword">this</span>.state.counter + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;section className=<span class="string">"IncreaserPanel"</span>&gt;</span><br><span class="line">                &lt;UIText</span><br><span class="line">                    text=&#123;<span class="keyword">this</span>.state.counter&#125;&gt;</span><br><span class="line">                &lt;<span class="regexp">/UIText&gt;</span></span><br><span class="line"><span class="regexp">                &lt;UIButton</span></span><br><span class="line"><span class="regexp">                    text='+'</span></span><br><span class="line"><span class="regexp">                    /</span><span class="regexp">/ onClick=&#123;() =&gt; this.increaser()&#125;&gt;  /</span><span class="regexp">/ this is correct, bind increaser function with this context</span></span><br><span class="line"><span class="regexp">                    onClick=&#123;this.increaser&#125; /</span><span class="regexp">/ will fail as this is null</span></span><br><span class="line"><span class="regexp">                    onClick=&#123;this.increaserMock&#125;&gt; /</span><span class="regexp">/ this also works</span></span><br><span class="line"><span class="regexp">                &lt;/</span>UIButton&gt;</span><br><span class="line">            &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p><strong>Tips</strong>: Using <code>onClick={() =&gt; this.increaser()}</code> will cause that every time on rendering function, this function will be recreated. Then especially with the case that it is used as a props to child react element, it will lead to rerendering of the child element. This is a waste of performance.</p><h3 id="Export-function"><a href="#Export-function" class="headerlink" title="Export function"></a>Export function</h3><p>In ES6 class function grammer, the <code>export</code> could be like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent; <span class="comment">// import MyComponent from 'myComponent.js'</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * export &#123;</span></span><br><span class="line"><span class="comment"> *     MyComponent,         // import &#123;MyComponent&#125; from 'myComponent.js'</span></span><br><span class="line"><span class="comment"> *     MySecondComponent,</span></span><br><span class="line"><span class="comment"> *     //...</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>In CMD guideline, the export could be written like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    MyComponent: MyComponent <span class="comment">// import &#123;MyComponent&#125; from 'myComponent.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Not much difference, but if we use CMD guideline, it is easier to use in Server side render (SSR), because node.js supports CMD guideline.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is just to record all the issues I met during React development.&lt;/p&gt;
&lt;h3 id=&quot;Super&quot;&gt;&lt;a href=&quot;#Super&quot; class=&quot;headerlink&quot; title=&quot;Super&quot;&gt;&lt;/a&gt;Super&lt;/h3&gt;&lt;p&gt;Issue blog: &lt;a href=&quot;https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What’s the difference between “super()” and “super(props)” in React when using es6 classes?&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if you want to access `this.props` in constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; &amp;#123; icon: &#39;home&#39;, … &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;vs&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// If you do not want to access `this.props` in constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Props parameter is still available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; &amp;#123; icon: &#39;home&#39;, … &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// No difference outside constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; &amp;#123; icon: &#39;home&#39;, … &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;DisplayName&quot;&gt;&lt;a href=&quot;#DisplayName&quot; class=&quot;headerlink&quot; title=&quot;DisplayName&quot;&gt;&lt;/a&gt;DisplayName&lt;/h3&gt;&lt;p&gt;&lt;code&gt;SomeComponent.displayName&lt;/code&gt; is just to identify the name of current module.&lt;/p&gt;
&lt;p&gt;No functional use, just to help the debug to be clear.&lt;/p&gt;
&lt;p&gt;Issue blog: &lt;a href=&quot;https://stackoverflow.com/questions/41581130/what-is-react-component-displayname-is-used-for&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What is React component ‘displayName’ is used for?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React source code during debugging: &lt;a href=&quot;https://github.com/facebook/react/blob/90294ead4c627715cb70f20ff448bb0d34ee4c1b/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js#L50-L52&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Debug code in react&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;warnIfInvalidElement&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Component, element&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (__DEV__) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    warning(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      element === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; || element === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; || React.isValidElement(element),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;%s(...): A valid React element (or null) must be returned. You may have &#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;returned undefined, an array or some other invalid object.&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Component.displayName || Component.name || &lt;span class=&quot;string&quot;&gt;&#39;Component&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    warning(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      !Component.childContextTypes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;%s(...): childContextTypes cannot be defined on a functional component.&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Component.displayName || Component.name || &lt;span class=&quot;string&quot;&gt;&#39;Component&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
      <category term="React" scheme="http://wanderyt.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Host, Domain and Server Name</title>
    <link href="http://wanderyt.github.io/2017/04/26/Host-Domain-and-Server-Name/"/>
    <id>http://wanderyt.github.io/2017/04/26/Host-Domain-and-Server-Name/</id>
    <published>2017-04-26T01:57:36.000Z</published>
    <updated>2019-08-05T03:05:12.832Z</updated>
    
    <content type="html"><![CDATA[<p>最近看有关性能问题的分析，遇到几个名词：<code>Host</code>、<code>Domain</code>、<code>Server</code>。有点混淆不清，所以简单查了一下。</p><p>DNS(Domain Name Service)可以准确翻译某个指定的IP地址，找到对应的计算机，反之亦然。</p><p>IP地址比较难以记忆，所以Internet允许给网络中的计算机指定一个字符串定义的名称。比如IP地址为<code>18.72.0.3</code>就被指定为<code>bitsy.mit.edu</code>。整个字符串就是这台计算机的<code>host name</code>。第一部分的<code>bitsy</code>是机器名，其余的<code>mit.edu</code>是其<code>domain name</code>。</p><p>另外还有一张图能够说明<code>host name</code>和<code>domain name</code>的关系。</p><p><img src="Host-Domain.png" alt="Host Domain Difference"></p><p><code>Domain name</code>和<code>SubDomain name</code>比较好区分：</p><ul><li><p><strong>example.com</strong>是一个域名；</p></li><li><p><strong>tools.example.com</strong>是<code>example.com</code>上的子域名。</p></li></ul><p>来源：</p><p><a href="https://ist.mit.edu/network/ip" target="_blank" rel="noopener">IP Addresses, Host Names, and Domain Names</a></p><p><a href="https://halfelf.org/2012/subdomain-vs-domain/" target="_blank" rel="noopener">Subdomain vs Domain</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看有关性能问题的分析，遇到几个名词：&lt;code&gt;Host&lt;/code&gt;、&lt;code&gt;Domain&lt;/code&gt;、&lt;code&gt;Server&lt;/code&gt;。有点混淆不清，所以简单查了一下。&lt;/p&gt;
&lt;p&gt;DNS(Domain Name Service)可以准确翻译某个指定的
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
  </entry>
  
  <entry>
    <title>Yarn - New Package Management Tool</title>
    <link href="http://wanderyt.github.io/2016/10/13/Yarn-New-Package-Management-Tool/"/>
    <id>http://wanderyt.github.io/2016/10/13/Yarn-New-Package-Management-Tool/</id>
    <published>2016-10-13T03:14:14.000Z</published>
    <updated>2019-08-05T03:05:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>今天偶尔看到一篇<a href="https://code.facebook.com/posts/1840075619545360" target="_blank" rel="noopener">文章</a>，讲到Facebook新出的一个Package Management Tool：<code>Yarn</code>。</p><p>主要的优势就是分析包之间的关联关系，并缓存已下载的内部包依赖。Yarn的实现方法主要有三步。</p><ol><li>分析：分析每个包的内部依赖，并发送请求到<code>registry</code>。</li><li>获取：先从本地的全局缓存目录下查找所有的包，如果没有则进行下载。</li><li>链接：拷贝所有缓存中的包，到项目的<code>node_modules</code>目录下。</li></ol><p>Yarn已在Facebook的生成环境中使用，证明其工作的有效性。</p><pre><code>$ npm install -g yarn</code></pre><p>相关命令：</p><pre><code>$ npm install$ npm install --save &lt;name&gt;</code></pre><p>可以替换成：</p><pre><code>$ yarn$ yarn add &lt;name&gt;</code></pre><p>我也在本地试验了一下，找了一个最基本的项目，这是项目中目前的包依赖，<code>package.json</code>文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "express": "^4.14.0",</span><br><span class="line">    "grunt": "^1.0.1",</span><br><span class="line">    "grunt-contrib-concat": "^1.0.1",</span><br><span class="line">    "grunt-contrib-jshint": "^1.0.0",</span><br><span class="line">    "grunt-contrib-requirejs": "^1.0.0",</span><br><span class="line">    "grunt-contrib-uglify": "^2.0.0",</span><br><span class="line">    "grunt-contrib-watch": "^1.0.0",</span><br><span class="line">    "grunt-express-server": "^0.5.3",</span><br><span class="line">    "grunt-nodemon": "^0.4.2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总共只有这几个包依赖，但是如果使用<code>npm</code>进行安装。</p><pre><code>$ npm install</code></pre><p>这一条命令总共执行了3分钟。但如果换成<code>yarn</code>命令。</p><pre><code>$ yarn</code></pre><p>这一条命令分析出了380+个包依赖，优化后总共只执行了不到80秒。速度提升一倍以上，确实是很实用。</p><p>以后继续分析yarn的其他功能。</p><p>最后感叹一下，Facebook真是的前端技术领域里的担当啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天偶尔看到一篇&lt;a href=&quot;https://code.facebook.com/posts/1840075619545360&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;，讲到Facebook新出的一个Package Managemen
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
      <category term="Javascript" scheme="http://wanderyt.github.io/categories/UI-Development/Javascript/"/>
    
      <category term="npm" scheme="http://wanderyt.github.io/categories/UI-Development/Javascript/npm/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
      <category term="npm" scheme="http://wanderyt.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Git Flow With Branch Sync</title>
    <link href="http://wanderyt.github.io/2016/07/22/Git-Flow-With-Branch-Sync/"/>
    <id>http://wanderyt.github.io/2016/07/22/Git-Flow-With-Branch-Sync/</id>
    <published>2016-07-22T09:36:25.000Z</published>
    <updated>2019-08-05T03:05:12.831Z</updated>
    
    <content type="html"><![CDATA[<p>During the collaborative development, it is easy to find out that the local branch of your own repo is out-dated with the branch in remote repo.</p><p>For example, there is a repo named <code>remote/repo</code>. Then you fork it within your own github as <code>you/repo</code>.</p><p>To keep the <code>develop</code> branch in <code>you/repo</code> with the <code>develop</code> in <code>remote/repo</code>, the following steps may be needed.</p><h3 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h3><p>Checkout two develop branches.</p><pre><code>$ git checkout -b remote-develop remote/develop$ git checkout -b develop you/develop</code></pre><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p>If there are commits after the lastest sync, the <code>remote-develop</code> will be ahead of <code>develop</code> with several changes. Then you need to keep the <code>develop</code> with <code>remote-develop</code>.</p><pre><code>$ git checkout develop$ git merge remote-develop</code></pre><p>Then you have updated the local branch <code>develop</code> with lastest code. Finally the update for <code>you/repo</code> should be made to keep the two repos sync.</p><pre><code>$ git push you develop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;During the collaborative development, it is easy to find out that the local branch of your own repo is out-dated with the branch in remot
      
    
    </summary>
    
      <category term="Git" scheme="http://wanderyt.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wanderyt.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git Checkout With Updating Paths Error</title>
    <link href="http://wanderyt.github.io/2016/07/11/Git-Checkout-With-Updating-Paths-Error/"/>
    <id>http://wanderyt.github.io/2016/07/11/Git-Checkout-With-Updating-Paths-Error/</id>
    <published>2016-07-11T07:52:51.000Z</published>
    <updated>2019-08-05T03:05:12.831Z</updated>
    
    <content type="html"><![CDATA[<p>During co-development process, after we fork a repository, we always want to keep up our own repo updated with the original repo, then when I want to checkout a branch that tracking a branch on original remote, an error occurs.</p><pre><code>$ git remote -vorigin  git@github.corp.ebay.com:yuren/app-browse.git (fetch)origin  git@github.corp.ebay.com:yuren/app-browse.git (push)upstream    git@github.corp.ebay.com:Stubhub/app-browse.git (fetch)upstream    git@github.corp.ebay.com:Stubhub/app-browse.git (push)$ git checkout -B develop upstream/developfatal: Cannot update paths and switch to branch &apos;develop&apos; at the same time.Did you intend to checkout &apos;upstream&apos; which can not be resolved as commit?</code></pre><p>Here listed a correct answer from <a href="http://stackoverflow.com/questions/945654/git-checkout-updating-paths-is-incompatible-with-switching-branches" target="_blank" rel="noopener">stackoverflow</a>. It works for me.</p><pre><code>$ git remote update$ git checkout -B develop upstream/develop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;During co-development process, after we fork a repository, we always want to keep up our own repo updated with the original repo, then wh
      
    
    </summary>
    
      <category term="Git" scheme="http://wanderyt.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wanderyt.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Deep Clone in Javascript Object</title>
    <link href="http://wanderyt.github.io/2016/05/27/Deep-Clone-in-Javascript-Object/"/>
    <id>http://wanderyt.github.io/2016/05/27/Deep-Clone-in-Javascript-Object/</id>
    <published>2016-05-27T06:59:23.000Z</published>
    <updated>2019-08-05T03:05:12.829Z</updated>
    
    <content type="html"><![CDATA[<p>Continue with the last post, issue about deep clone in Javascript object.</p><p>Here is a test code snippet for shallow clone or deep clone.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test clone for array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> cloneArray = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> element) &#123;</span><br><span class="line">        result.push(element[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepCloneArray = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> element) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> element[i] == <span class="string">"object"</span>) &#123;</span><br><span class="line">            result.push(deepCloneArray(element[i]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(element[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test clone for object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> cloneObject = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> element) &#123;</span><br><span class="line">        result[i] = element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepCloneObject = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;; <span class="comment">// Trap 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> element) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> element[i] == <span class="string">"object"</span>) &#123;</span><br><span class="line">            result[i] = deepCloneObject(element[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = element[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>For testing array code part, I am really amazed that the cloned array is independent from the original array.</p><p>Maybe there is no deep or shallow clone difference in Javascript array objects.</p><p>However, for testing object code part, the difference does exist.</p><h4 id="Trap-1"><a href="#Trap-1" class="headerlink" title="Trap 1"></a>Trap 1</h4><p>In this place, a type check should be added. This version is simplified.</p><p>Among objects, there are mainly three sub types that need attention.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Function</span>; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Therefore, for trap 1 case, an instanceof check should be added, to decide whether the result structure should be array or object.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Continue with the last post, issue about deep clone in Javascript object.&lt;/p&gt;
&lt;p&gt;Here is a test code snippet for shallow clone or deep cl
      
    
    </summary>
    
      <category term="Javascript" scheme="http://wanderyt.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Subset Algorithm Solution</title>
    <link href="http://wanderyt.github.io/2016/05/26/Subset-Algorithm-Solution/"/>
    <id>http://wanderyt.github.io/2016/05/26/Subset-Algorithm-Solution/</id>
    <published>2016-05-26T09:13:10.000Z</published>
    <updated>2019-08-05T03:05:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I applied for the UI engineer position, and in second Skype interview, the interviewee posted an algorithm question.</p><pre><code>Q1:Given an array of integers, print all subsets of size kE.g. A = [1 2 4 2], printSubsets(A, 1) should output124printSubsets(A, 2) should output1 21 42 4printSubsets(A, 3) should output1 2 4</code></pre><a id="more"></a><p>I am not gooed at algorithm, even bad at it. So the only solution I could thought of is Recurrsion.</p><p>Yeah, that sucks. However, it really works in this question.</p><p>I just need to use recurrsion to reuse the output of subsets with fewer integers, and then combine the subsets with original array to make a Cartesion product.</p><p>During this solution thinking, I forgot several things that should be focused or paid attention to. Fortunately, these missings has been notified by the kind interviewee.</p><p>Here the solution is attached.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printSubsets = <span class="function"><span class="keyword">function</span>(<span class="params">array, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">            pushElement(result, [array[i]]); <span class="comment">// Trap 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> combineElement(array, printSubsets(array, num - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pushElement = <span class="function"><span class="keyword">function</span>(<span class="params">array, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newElement = element.sort(); <span class="comment">// [1,2], [2,1] = &gt; [1,2] Trap 2</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">        flag = array[i].toString() == element.toString() || flag; <span class="comment">// Trap 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        array.push(newElement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> combineElement = <span class="function"><span class="keyword">function</span>(<span class="params">array, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> targetResult = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> array) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> result) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result[j].indexOf(array[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> resultClone = deepCloneArray(result[j]); <span class="comment">// Trap 4</span></span><br><span class="line">                resultClone.push(array[i]);</span><br><span class="line">                pushElement(targetResult, resultClone);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetResult;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cloneArray = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> element) &#123;</span><br><span class="line">        result.push(element[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deepCloneArray = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> element) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> element[i] == <span class="string">"object"</span>) &#123;</span><br><span class="line">            result.push(deepCloneArray(element[i]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(element[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>I have pointed out the four traps.</p><h4 id="Trap-1"><a href="#Trap-1" class="headerlink" title="Trap 1"></a>Trap 1</h4><p>Rewrite the push method so that the new element will be checked first, and then decided whether to be pushed into the result array.</p><h4 id="Trap-2"><a href="#Trap-2" class="headerlink" title="Trap 2"></a>Trap 2</h4><p>The order of new element should be considerred. [1, 2] and [2, 1] should be regarded as same element, and one of two elements should not be pushed into result array if the other has already been pushed.</p><h4 id="Trap-3"><a href="#Trap-3" class="headerlink" title="Trap 3"></a>Trap 3</h4><p>When checking two arrays which contain the same elements, the method <code>toString</code> could be used.</p><pre><code>[1,2] == [1,2] // false[1,2].toString() == [1,2].toString() // true</code></pre><h4 id="Trap-4"><a href="#Trap-4" class="headerlink" title="Trap 4"></a>Trap 4</h4><p>In each loop for array elements, the result should remain same. Therefore, we need to ensure that the original result array should not be poluted.</p><p>Then what bothers me is that the two function: cloneArray and deepCloneArray. Apparently, cloneArray is just copying arrays in a shallow layer, while deepCloneArray can copy arrays with deepest layer.</p><p>However, run the below code, the output realy amazes me.</p><pre><code>var source = [[1], [2], [3]];var testClone = cloneArray(source);var testDeepClone = deepCloneArray(source);testClone; // [[1], [2], [3]]testDeepClone; // [[1], [2], [3]]source[0] = [1,2];testClone; // [[1], [2], [3]]testDeepClone; // [[1], [2], [3]]</code></pre><p>Really not the same as what I thought it would be.</p><p>Another post is waiting for me to explore the copy issue.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I applied for the UI engineer position, and in second Skype interview, the interviewee posted an algorithm question.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Q1:
Given an array of integers, print all subsets of size k
E.g. A = [1 2 4 2], printSubsets(A, 1) should output
1
2
4
printSubsets(A, 2) should output
1 2
1 4
2 4
printSubsets(A, 3) should output
1 2 4
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://wanderyt.github.io/categories/Algorithm/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
      <category term="Algorithm" scheme="http://wanderyt.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Learning - Class</title>
    <link href="http://wanderyt.github.io/2016/04/18/ES6-Learning-Class/"/>
    <id>http://wanderyt.github.io/2016/04/18/ES6-Learning-Class/</id>
    <published>2016-04-18T02:23:24.000Z</published>
    <updated>2019-08-05T03:05:12.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，不用加<code>function</code>关键字，并且方法之间不需要加分号。</p><p>类的数据类型就是函数，类本身就指向构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></span><br><span class="line">Point === Point.prototype.constructor <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类的实例上调用方法，其实就是调用原型上的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point();</span><br><span class="line">point.constructor = Point.prototype.constructor; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类的内部定义的所有方法，都是不可枚举的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(Point.prototype)</span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class="line"><span class="comment">// ["constructor","toString"]</span></span><br></pre></td></tr></table></figure><h3 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h3><p>通过<code>new</code>命令生成对象实例时，自动调用该方法。默认返回实例对象（this），但也可以指定返回其他对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooTestString</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Test String'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooTestString = <span class="keyword">new</span> FooTestString();</span><br><span class="line">fooTestString <span class="keyword">instanceof</span> FooTestString; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooTestNewString</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Test String'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooTestNewString = <span class="keyword">new</span> FooTestNewString();</span><br><span class="line">fooTestNewString <span class="keyword">instanceof</span> FooTestNewString; <span class="comment">// false</span></span><br><span class="line">fooTestNewString <span class="keyword">instanceof</span> <span class="built_in">String</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装Node和Git</title>
    <link href="http://wanderyt.github.io/2016/04/15/Linux-Node-Git-Install/"/>
    <id>http://wanderyt.github.io/2016/04/15/Linux-Node-Git-Install/</id>
    <published>2016-04-15T07:19:18.000Z</published>
    <updated>2019-08-05T03:05:12.833Z</updated>
    
    <content type="html"><![CDATA[<p>还是最近UI Club的小项目。对于我这种linux白痴来说，需要在远程的Linux安装Node环境和Git环境，今天算是上了满满一堂课，感谢Guoliang老师的耐心帮忙。</p><p>首先还是要安装一些最基本的应用。</p><p>ssh远程命令行操作的神器：<a href="http://mobaxterm.mobatek.net/" target="_blank" rel="noopener">xterm</a>。</p><p>操作文件系统的应用：<a href="http://winscp.net/eng/index.php" target="_blank" rel="noopener">winscp</a>。</p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>首先去Node官网下载Linux版本的安装文件，下载下来是一个<code>tar.xz</code>文件。这种文件就是Linux下面的压缩包后缀。</p><p>使用<code>winscp</code>将安装包拖拽到远程目录中，我放到的是<code>/root/Downloads</code>下。之后使用解压缩命令。</p><pre><code>$ tar xvfJ [node-install-file.tar.xz] -C [/tmp/node]</code></pre><p>命令的含义是将压缩包解压缩到<code>/tmp/node</code>文件夹下。</p><p>之后将node文件夹移动到用户的目录下。</p><pre><code>$ sudo su -c &quot;chown -R root:root /tmp/node*&quot;$ sudo mv /tmp/node* /usr/local/node</code></pre><p>这里可以任意指定node的安装目录，我是放到了<code>/usr/local/node</code>下。</p><h2 id="设置node环境变量"><a href="#设置node环境变量" class="headerlink" title="设置node环境变量"></a>设置node环境变量</h2><p>这时访问node命令发现不会识别，主要是因为环境命令还没有设置。</p><p>设置环境命令有多个地方。</p><blockquote><p>可以在顶级目录下的<code>/etc/bash.bashrc</code>文件中追加<code>PATH</code>的定义。这种方式会使所有的用户都获得这种命令的执行权。</p></blockquote><blockquote><p>在当前用户下的<code>.bashrc</code>文件中追加<code>PATH</code>的定义。这种方式只会让当前用户获得这种命令的执行权。我选择的是这一种方法。</p></blockquote><p>首先查看当前环境变量的定义。</p><pre><code>$ cd /root$ cat .bashrc</code></pre><p>可以看到里面的定义。此时利用vim编辑器编辑文件，追加<code>PATH</code>的定义。</p><pre><code>$ vi .bashrc</code></pre><p>进入编辑器模式，填写内容：</p><pre><code>export PATH=&quot;$PATH:[node-directory]/bin&quot;</code></pre><p>这里将node的安装目录下的<code>bin</code>文件夹设置进来。加两个vim的命令。</p><p><strong>注意，其一，Linux的环境变量是通过冒号分隔的；其二，安装目录路径一定要是绝对路径。</strong></p><pre><code>ESC： 从编辑模式切换到命令模式a： 当前光标位置追加文本wq： 保存文件并退出</code></pre><p>保存时可能会遇到<code>readonly option is set</code>的错误。这时输入命令</p><pre><code>:set noreadonly</code></pre><p>之后再输入<code>wq</code>就可以保存退出了。</p><p>这时重新开一个<code>session</code>，就能使用<code>node</code>命令和<code>npm</code>命令了。</p><p>补充一点，<code>cd ~</code>会直接进入当前用户的文件夹目录。所以<code>cnpvg50830120:/</code>和<code>cnpvg50830120:~</code>的区别就在于，前者是绝对路径，是顶级目录，后者是当前用户所在的文件夹目录。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>首先查看当前Linux的版本信息再决定用哪个安装。</p><pre><code>$ cat /etc/SuSE-release</code></pre><p>我的那个server是SUSE Linux Enterprise 11 SP3，所以用<code>zypper</code>命令安装<code>Git</code>。</p><pre><code>$ zypper search git // 搜索当前REPOSITORY的安装列表里是否有git安装文件$ zypper install git</code></pre><p>REPOSITORY是负责定义安装那些工具的来源。这些来源可以通过命令来看。</p><pre><code>$ zypper lr // 列出所有的源$ zypper ar [options] &lt;URI&gt; &lt;alias&gt; // 添加源</code></pre><p>定义源其实就是定义一些安装时下载的来源，所以使用<code>zypper install [name]</code>时需要联网。</p><pre><code>$ curl www.baidu.com // 检查是否能联网访问baidu.com</code></pre><p>其他的一些命令。</p><pre><code>$ zypper mr // 删除源$ zypper rr // 导入导出源</code></pre><p>安装好之后，就可以使用<code>Git</code>了。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在服务器上新建一个项目目录，用于clone项目代码。</p><pre><code>$ mkdir [WORKSPACE_PATH/PROJECT_NAME]$ git clone [GIT_URL] [PROJECT_PATH]</code></pre><p>这时可能会报错，说<code>Could not read from remote repository</code>。</p><p>这个错有可能是因为当前机器上的ssh key没设定或者没有添加到Github账号中做关联。</p><pre><code>$ ssh-keygen -t rsa -C &quot;USER_NAME&quot; // 注意。USER_NAME为Github用户名</code></pre><p>之后可能会问<code>.ssh</code>要生成到哪个文件夹下，我全部使用默认。</p><p>生成<code>ssh key</code>之后，将<code>id_rsa.pub</code>文件内容添加到<code>Github</code>账号中。之后就可以正常的clone git repository。</p><p>每次更新代码时，执行git命令。</p><pre><code>$ cd [PROJECT_PATH]$ git fetch origin$ git rebase [BRANCH_NAME]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还是最近UI Club的小项目。对于我这种linux白痴来说，需要在远程的Linux安装Node环境和Git环境，今天算是上了满满一堂课，感谢Guoliang老师的耐心帮忙。&lt;/p&gt;
&lt;p&gt;首先还是要安装一些最基本的应用。&lt;/p&gt;
&lt;p&gt;ssh远程命令行操作的神器：&lt;a h
      
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Git" scheme="http://wanderyt.github.io/tags/Git/"/>
    
      <category term="Nodejs" scheme="http://wanderyt.github.io/tags/Nodejs/"/>
    
      <category term="Linux" scheme="http://wanderyt.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Learning - 异步操作 &amp; Async函数</title>
    <link href="http://wanderyt.github.io/2016/04/13/ES6-Learning-Asynchronous-Operation-and-Async-Function/"/>
    <id>http://wanderyt.github.io/2016/04/13/ES6-Learning-Asynchronous-Operation-and-Async-Function/</id>
    <published>2016-04-13T02:09:33.000Z</published>
    <updated>2019-08-05T03:05:12.829Z</updated>
    
    <content type="html"><![CDATA[<p>ES6之前，异步编程的方法大概四种。</p><blockquote><p>回调函数</p><p>事件监听</p><p>发布 / 订阅</p><p>Promise对象</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>一个任务分成几段之后，可以先执行第一段，然后转而执行其他任务，等准备好之后再执行第二段。</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>一个任务分成几段之后，段与段之间不能插入其他任务，必须连续执行，这段时间其他任务只能干等着。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>任务分成几段之后，第一段中的function定义了第二段函数的参数，这时第二个参数就是回调函数。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><pre><code>new Promise().then().then()...</code></pre><a id="more"></a><h2 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h2><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>多个线程互相协作，完成异步任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">asnycJob</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...其他代码</span></span><br><span class="line">  <span class="keyword">var</span> f = <span class="keyword">yield</span> readFile(fileA);</span><br><span class="line">  <span class="comment">// ...其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>奥妙就在于yield命令的使用。</strong></p><h3 id="异步任务的封装"><a href="#异步任务的封装" class="headerlink" title="异步任务的封装"></a>异步任务的封装</h3><p>看一个案例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://api.github.com/users/github'</span>;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">  <span class="built_in">console</span>.log(result.bio);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"><span class="keyword">var</span> result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  g.next(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>例子里用Generator函数实现了异步执行，但是连续调用<code>g.next()</code>显得流程管理上不是那么方便。</p><h2 id="Thunk函数"><a href="#Thunk函数" class="headerlink" title="Thunk函数"></a>Thunk函数</h2><h3 id="参数的求值策略"><a href="#参数的求值策略" class="headerlink" title="参数的求值策略"></a>参数的求值策略</h3><p>传值调用还是传名调用。传值调用明显更通俗易懂，而且简单实用。而传名调用可能会有性能上的优化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">3</span> * x * x - <span class="number">2</span> * x - <span class="number">1</span>, x);</span><br></pre></td></tr></table></figure><h3 id="Thunk函数的含义"><a href="#Thunk函数的含义" class="headerlink" title="Thunk函数的含义"></a>Thunk函数的含义</h3><p>传名调用实现就是将参数放到一个临时函数中，再将这个临时函数传入函数体。这个临时函数就是Thunk函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(x + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thunk = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">thunk</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> thunk() * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thunk-in-Javascript"><a href="#Thunk-in-Javascript" class="headerlink" title="Thunk in Javascript"></a>Thunk in Javascript</h3><p>Javascript是执行的传值调用。Thunk将多参数函数替换成单参数版本，只接受回调函数作为参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常版本的readFile（多参数版本）</span></span><br><span class="line">fs.readFile(fileName, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thunk版本的readFile（单参数版本）</span></span><br><span class="line"><span class="keyword">var</span> readFileThunk = Thunk(fileName);</span><br><span class="line">readFileThunk(callback);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Thunk = <span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.readFile(fileName, callback);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一个简单的Thunk函数转换器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Thunk = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">      args.push(callback);</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFileThunk = Thunk(fs.readFile);</span><br><span class="line">readFileThunk(fileA)(callback);</span><br></pre></td></tr></table></figure><h3 id="Generator函数流程管理"><a href="#Generator函数流程管理" class="headerlink" title="Generator函数流程管理"></a>Generator函数流程管理</h3><p>正常情况来说，Generator函数封装的异步操作可以如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify'</span>);</span><br><span class="line"><span class="keyword">var</span> readFile = thunkify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r1 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(r1.toString());</span><br><span class="line">  <span class="keyword">var</span> r2 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(r2.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r1 = g.next();</span><br><span class="line">r1.value(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">var</span> r2 = g.next(data);</span><br><span class="line">  r2.value(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    g.next(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6之前，异步编程的方法大概四种。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回调函数&lt;/p&gt;
&lt;p&gt;事件监听&lt;/p&gt;
&lt;p&gt;发布 / 订阅&lt;/p&gt;
&lt;p&gt;Promise对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;异步&quot;&gt;&lt;a href=&quot;#异步&quot; class=&quot;headerlink&quot; title=&quot;异步&quot;&gt;&lt;/a&gt;异步&lt;/h3&gt;&lt;p&gt;一个任务分成几段之后，可以先执行第一段，然后转而执行其他任务，等准备好之后再执行第二段。&lt;/p&gt;
&lt;h3 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h3&gt;&lt;p&gt;一个任务分成几段之后，段与段之间不能插入其他任务，必须连续执行，这段时间其他任务只能干等着。&lt;/p&gt;
&lt;h3 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h3&gt;&lt;p&gt;任务分成几段之后，第一段中的function定义了第二段函数的参数，这时第二个参数就是回调函数。&lt;/p&gt;
&lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;new Promise().then().then()...
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="UI Development" scheme="http://wanderyt.github.io/categories/UI-Development/"/>
    
    
      <category term="Javascript" scheme="http://wanderyt.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Git Url HTTPS SSH 区别</title>
    <link href="http://wanderyt.github.io/2016/04/12/Git-Url-HTTPS-SSH-Difference/"/>
    <id>http://wanderyt.github.io/2016/04/12/Git-Url-HTTPS-SSH-Difference/</id>
    <published>2016-04-12T09:59:35.000Z</published>
    <updated>2019-08-05T03:05:12.832Z</updated>
    
    <content type="html"><![CDATA[<p>继续昨天的搭环境步骤。建好一个<code>repository</code>之后，我是把项目的<code>ssh url</code>发出来给的大家，这其中遇到了一些问题。</p><h2 id="他人无法clone"><a href="#他人无法clone" class="headerlink" title="他人无法clone"></a>他人无法clone</h2><p>开发人员使用ssh的url进行clone的时候，发现会报错，然后换成https的url就可以。</p><p>网上查了下发现，使用https url克隆对初学者来说会比较方便，复制https url然后到git Bash里面直接用clone命令克隆到本地就好了，但是每次fetch和push代码都需要输入账号和密码，这也是https方式的麻烦之处。而使用SSH url克隆却需要在克隆之前先配置和添加好SSH key，因此，如果你想要使用SSH url克隆的话，你必须是这个项目的拥有者。否则你是无法添加SSH key的，另外ssh默认是每次fetch和push代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行fetch和push也可以另外进行设置。</p><p>使用https的时候可能会遇到<code>unable to get local issuer certificate</code>错误，这时需要设置</p><pre><code>git config --global http.sslVerify false</code></pre><p><a href="http://stackoverflow.com/questions/23885449/unable-to-resolve-unable-to-get-local-issuer-certificate-using-git-on-windows" target="_blank" rel="noopener">stackoverflow对应问题解答</a>。</p><h2 id="他人无法提交代码"><a href="#他人无法提交代码" class="headerlink" title="他人无法提交代码"></a>他人无法提交代码</h2><p>这个有多种解决方案。</p><h3 id="将他人的公钥加到项目的公钥中"><a href="#将他人的公钥加到项目的公钥中" class="headerlink" title="将他人的公钥加到项目的公钥中"></a>将他人的公钥加到项目的公钥中</h3><h3 id="fork-pull-request"><a href="#fork-pull-request" class="headerlink" title="fork + pull request"></a>fork + pull request</h3><p>这种方式感觉不太适合协同开发</p><h3 id="设置Collaborators"><a href="#设置Collaborators" class="headerlink" title="设置Collaborators"></a>设置Collaborators</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续昨天的搭环境步骤。建好一个&lt;code&gt;repository&lt;/code&gt;之后，我是把项目的&lt;code&gt;ssh url&lt;/code&gt;发出来给的大家，这其中遇到了一些问题。&lt;/p&gt;
&lt;h2 id=&quot;他人无法clone&quot;&gt;&lt;a href=&quot;#他人无法clone&quot; class=
      
    
    </summary>
    
      <category term="Git" scheme="http://wanderyt.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wanderyt.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git Fork Sync</title>
    <link href="http://wanderyt.github.io/2016/04/08/Git-Fork-Sync/"/>
    <id>http://wanderyt.github.io/2016/04/08/Git-Fork-Sync/</id>
    <published>2016-04-08T06:55:21.000Z</published>
    <updated>2019-08-05T03:05:12.832Z</updated>
    
    <content type="html"><![CDATA[<p>今天在工作中，想在<code>Github</code>上建立一个<code>repository</code>供大家协同开发，有人提出要可以进行<code>code review</code>，之前在项目中用到过<code>Gerrit</code>，但是这种小型项目感觉用<code>Gerrit</code>有点大材小用。</p><p>总之，先尝试了一下Fork的使用。</p><h2 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h2><p><code>USERA</code>在<code>Github</code>上新建一个<code>repository</code>，之后<code>USERB</code>去<code>Fork</code>这个<code>repository</code>。然后<code>clone</code>到本地。</p><pre><code>$ git clone git@github.wdf.sap.corp:USERB/RepositoryName.git</code></pre><p>这里用的是ssh url。</p><h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><p><code>Clone</code>下来之后，<code>USERB</code>可以进行编辑，比如新建一个<code>err.md</code>文件，并填写一些内容。</p><pre><code>$ git add filename$ git commit</code></pre><h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><p>之后，<code>USERB</code>进行<code>push</code>操作，注意，此时<code>push</code>是到了<code>USERB</code>的<code>repository</code>。</p><p>如果想要让项目的原作者注意到，<code>USERB</code>需要发起一个<code>pull request</code>。</p><h2 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h2><p>创建一个<code>pull request</code>，<code>base</code>是远程的USERA的<code>repository</code>，<code>head</code>是<code>USERB</code>的<code>repository</code>。</p><p>填写<code>comment</code>，这时就可以等待原作者的同意并并入到原作者的项目中去了。</p><h2 id="Keep-Synced"><a href="#Keep-Synced" class="headerlink" title="Keep Synced"></a>Keep Synced</h2><p>此时大家可能会注意到一个问题，我们如何保持我们fork出来的项目和原项目同步呢？</p><pre><code>$ git fetch [origin]</code></pre><p>这条命令没有错，但是只是从<code>USERB</code>的<code>repository</code>的远程来拉代码，并不能解决同步问题。</p><p>这时我们需要设定一个新的<code>remote</code>源。</p><pre><code>$ git remote -v</code></pre><p>查看当前的<code>remote</code>。</p><pre><code>origin  git@github.wdf.sap.corp:USERB/RepositoryName.git (fetch)origin  git@github.wdf.sap.corp:USERB/RepositoryName.git (push)</code></pre><p>新加一个新的<code>remote</code>。</p><pre><code>$ git remote add upstream git@github.wdf.sap.corp:USERA/RepositoryName.git</code></pre><p>此时我们看到，<code>remote</code>变成了四个。</p><pre><code>origin  git@github.wdf.sap.corp:USERB/RepositoryName.git (fetch)origin  git@github.wdf.sap.corp:USERB/RepositoryName.git (push)upstream  git@github.wdf.sap.corp:USERA/RepositoryName.git (fetch)upstream  git@github.wdf.sap.corp:USERA/RepositoryName.git (push)</code></pre><p>之后，我们如果要保持代码同步的话，可以直接输入命令。</p><pre><code>$ git fetch upstream</code></pre><h2 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h2><p>参考文章： <a href="http://www.worldhello.net/gotgithub/04-work-with-others/010-fork-and-pull.html" target="_blank" rel="noopener">Fork and Pull</a>, <a href="https://help.github.com/articles/fork-a-repo/" target="_blank" rel="noopener">Fork a Repo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在工作中，想在&lt;code&gt;Github&lt;/code&gt;上建立一个&lt;code&gt;repository&lt;/code&gt;供大家协同开发，有人提出要可以进行&lt;code&gt;code review&lt;/code&gt;，之前在项目中用到过&lt;code&gt;Gerrit&lt;/code&gt;，但是这种小型项目感觉
      
    
    </summary>
    
      <category term="Git" scheme="http://wanderyt.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wanderyt.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
